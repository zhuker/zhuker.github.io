{"mappings":"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","sources":["node_modules/tslib/tslib.es6.js","node_modules/rxjs/src/internal/util/isFunction.ts","node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","node_modules/rxjs/src/internal/util/createErrorClass.ts","node_modules/rxjs/src/internal/util/arrRemove.ts","node_modules/rxjs/src/internal/Subscription.ts","node_modules/rxjs/src/internal/config.ts","node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts","node_modules/rxjs/src/internal/util/reportUnhandledError.ts","node_modules/rxjs/src/internal/util/noop.ts","node_modules/rxjs/src/internal/NotificationFactories.ts","node_modules/rxjs/src/internal/util/errorContext.ts","node_modules/rxjs/src/internal/Subscriber.ts","node_modules/rxjs/src/internal/symbol/observable.ts","node_modules/rxjs/src/internal/util/identity.ts","node_modules/rxjs/src/internal/util/pipe.ts","node_modules/rxjs/src/internal/Observable.ts","node_modules/rxjs/src/internal/util/isArrayLike.ts","node_modules/rxjs/src/internal/symbol/iterator.ts","node_modules/rxjs/src/internal/observable/innerFrom.ts","node_modules/rxjs/src/internal/util/isInteropObservable.ts","node_modules/rxjs/src/internal/util/isPromise.ts","node_modules/rxjs/src/internal/util/isAsyncIterable.ts","node_modules/rxjs/src/internal/util/isIterable.ts","node_modules/rxjs/src/internal/util/isReadableStreamLike.ts","node_modules/rxjs/src/internal/util/throwUnobservableError.ts","node_modules/rxjs/src/internal/util/lift.ts","node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts","node_modules/rxjs/src/internal/operators/map.ts","node_modules/rxjs/src/internal/operators/mergeMap.ts","node_modules/rxjs/src/internal/operators/mergeInternals.ts","node_modules/rxjs/src/internal/util/executeSchedule.ts","node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts","node_modules/rxjs/src/internal/observable/fromEvent.ts","node_modules/rxjs/src/internal/util/argsOrArgArray.ts","node_modules/rxjs/src/internal/observable/empty.ts","node_modules/rxjs/src/internal/util/args.ts","node_modules/rxjs/src/internal/observable/zip.ts","app.ts","node_modules/rxjs/src/internal/operators/concatMap.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered teardowns to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _teardowns: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the teardown\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown } = this;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _teardowns } = this;\n      if (_teardowns) {\n        this._teardowns = null;\n        for (const teardown of _teardowns) {\n          try {\n            execTeardown(teardown);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a teardown to this subscription, so that teardown will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever teardown is passed to it\n   * will automatically be executed (unless the teardown itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The teardown logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the teardown if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever teardown is handed to it automatically.\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = this._teardowns ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a teardown from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All teardown instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The teardown to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _teardowns } = this;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execTeardown(teardown: Unsubscribable | (() => void)) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","type SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearTimeoutFunction = (handle: number) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(...args) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.setTimeout || setTimeout)(...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle);\n  },\n  delegate: undefined,\n};\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let next: ((value: T) => void) | undefined;\n    if (isFunction(observerOrNext)) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      // The first argument is an observer object, we have to pull the handlers\n      // off and capture the owner object as the context. That is because we're\n      // going to put them all in a new destination with ensured methods\n      // for `next`, `error`, and `complete`. That's part of what makes this\n      // the \"Safe\" Subscriber.\n      ({ next, error, complete } = observerOrNext);\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n      } else {\n        context = observerOrNext;\n      }\n      next = next?.bind(context);\n      error = error?.bind(context);\n      complete = complete?.bind(context);\n    }\n\n    // Once we set the destination, the superclass `Subscriber` will\n    // do it's magic in the `_next`, `_error`, and `_complete` methods.\n    this.destination = {\n      next: next ? wrapForErrorHandling(next, this) : noop,\n      error: wrapForErrorHandling(error ?? defaultErrorHandler, this),\n      complete: complete ? wrapForErrorHandling(complete, this) : noop,\n    };\n  }\n}\n\n/**\n * Wraps a user-provided handler (or our {@link defaultErrorHandler} in one case) to\n * ensure that any thrown errors are caught and handled appropriately.\n *\n * @param handler The handler to wrap\n * @param instance The SafeSubscriber instance we're going to mark if there's an error.\n */\nfunction wrapForErrorHandling(handler: (arg?: any) => void, instance: SafeSubscriber<any>) {\n  return (...args: any[]) => {\n    try {\n      handler(...args);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        // Ideal path, we report this as an unhandled error,\n        // which is thrown on a new call stack.\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","export function identity<T>(x: T): T {\n  return x;\n}\n","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","/**\n * @prettier\n */\nimport { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ### Example:\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { take } from 'rxjs/operators';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *    let total = 0;\n   *\n   *    await source$.forEach(value => {\n   *      total += value;\n   *      console.log('observable -> ', value);\n   *    });\n   *\n   *    return total;\n   * }\n   *\n   * getTotal().then(\n   *    total => console.log('Total:', total)\n   * )\n   *\n   * // Expected:\n   * // \"observable -> 0\"\n   * // \"observable -> 1\"\n   * // \"observable -> 2\"\n   * // \"observable -> 3\"\n   * // \"Total: 6\"\n   * ```\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe(\n        (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription?.unsubscribe();\n          }\n        },\n        reject,\n        resolve\n      );\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n   * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    const { closed } = this;\n    super.unsubscribe();\n    // Execute additional teardown if we have any and we didn't already do so.\n    !closed && this.onFinalize?.();\n  }\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalTeardown?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    new OperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional teardown (for when the destination is torn down).\n  // Other teardown is added implicitly via subscription above.\n  return () => {\n    additionalTeardown?.();\n  };\n}\n","import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<R>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        innerFrom(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we teardown, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","const { isArray } = Array;\n\n/**\n * Used in operators and functions that accept either a list of arguments, or an array of arguments\n * as a single argument.\n */\nexport function argsOrArgArray<T>(args: (T | T[])[]): T[] {\n  return args.length === 1 && isArray(args[0]) ? args[0] : (args as T[]);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferable to use this over `empty()`.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * ## Examples\n *\n * ### Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * ### Emit the number 7, then complete\n *\n * ```ts\n * import { empty } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n *\n * ```ts\n * import { empty, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return An \"empty\" Observable: emits only the complete\n * notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\n\nexport function zip<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\nexport function zip<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the last parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n *\n * Combine age and name from different sources\n *\n * ```ts\n * import { zip, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * let age$ = of(27, 25, 29);\n * let name$ = of('Foo', 'Bar', 'Beer');\n * let isDev$ = of(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map(([age, name, isDev]) => ({ age, name, isDev }))\n * )\n * .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param sources\n * @return {Observable<R>}\n */\nexport function zip(...args: unknown[]): Observable<unknown> {\n  const resultSelector = popResultSelector(args);\n\n  const sources = argsOrArgArray(args) as Observable<unknown>[];\n\n  return sources.length\n    ? new Observable<unknown[]>((subscriber) => {\n        // A collection of buffers of values from each source.\n        // Keyed by the same index with which the sources were passed in.\n        let buffers: unknown[][] = sources.map(() => []);\n\n        // An array of flags of whether or not the sources have completed.\n        // This is used to check to see if we should complete the result.\n        // Keyed by the same index with which the sources were passed in.\n        let completed = sources.map(() => false);\n\n        // When everything is done, release the arrays above.\n        subscriber.add(() => {\n          buffers = completed = null!;\n        });\n\n        // Loop over our sources and subscribe to each one. The index `i` is\n        // especially important here, because we use it in closures below to\n        // access the related buffers and completion properties\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n          innerFrom(sources[sourceIndex]).subscribe(\n            new OperatorSubscriber(\n              subscriber,\n              (value) => {\n                buffers[sourceIndex].push(value);\n                // if every buffer has at least one value in it, then we\n                // can shift out the oldest value from each buffer and emit\n                // them as an array.\n                if (buffers.every((buffer) => buffer.length)) {\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\n                  // Emit the array. If theres' a result selector, use that.\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\n                  // If any one of the sources is both complete and has an empty buffer\n                  // then we complete the result. This is because we cannot possibly have\n                  // any more values to zip together.\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                    subscriber.complete();\n                  }\n                }\n              },\n              () => {\n                // This source completed. Mark it as complete so we can check it later\n                // if we have to.\n                completed[sourceIndex] = true;\n                // But, if this complete source has nothing in its buffer, then we\n                // can complete the result, because we can't possibly have any more\n                // values from this to zip together with the other values.\n                !buffers[sourceIndex].length && subscriber.complete();\n              }\n            )\n          );\n        }\n\n        // When everything is done, release the arrays above.\n        return () => {\n          buffers = completed = null!;\n        };\n      })\n    : EMPTY;\n}\n","import * as rxjs from \"rxjs\"\nimport {fromEvent, Observable} from \"rxjs\"\nimport * as ops from \"rxjs/operators\"\n\ndeclare global {\n  interface HTMLVideoElement {\n    requestVideoFrameCallback(listener: (this: HTMLVideoElement, now: number, metadata: any) => any): MediaStream;\n  }\n}\n\nconsole.log(\"hello world\", Observable);\nconst facevideo = <HTMLVideoElement>document.getElementById(\"face\")\nconst maskvideo = <HTMLVideoElement>document.getElementById(\"mask\")\n\nfunction framerx(video: HTMLVideoElement): Observable<[HTMLVideoElement, number, any]> {\n  return new Observable(s => {\n    let subscribed = true;\n    let listener = (time, meta) => {\n      s.next([video, time, meta])\n      if (subscribed) {\n        video.requestVideoFrameCallback(listener);\n      }\n    };\n    video.requestVideoFrameCallback(listener);\n    return () => subscribed = false;\n  })\n}\n\nlet maskTime = -1;\n\nfunction bothcanplayrx(): Observable<readonly unknown[]> {\n  return rxjs.zip([fromEvent(facevideo, \"canplay\"), fromEvent(maskvideo, \"canplay\")]);\n}\n\nfunction bothplay() {\n  return rxjs.zip([fromEvent(facevideo, \"play\"), fromEvent(maskvideo, \"play\")]);\n}\n\nconst playbutton = <HTMLButtonElement>document.getElementById(\"playbutton\")\nplaybutton.onclick = e => {\n  maskvideo.play();\n  facevideo.play();\n  playbutton.disabled = true;\n}\n\nfunction main() {\n  bothcanplayrx().pipe(\n    ops.concatMap(x => {\n      console.log(\"both videos canplay\", x);\n      playbutton.disabled = false;\n      return bothplay()\n    })\n  ).subscribe(x => {\n    console.log(\"both playing\", x);\n    const whiteonblack = <HTMLCanvasElement>document.getElementById(\"whiteonblack\");\n    const whiteonblackctx = whiteonblack.getContext('2d')\n\n    const blackonwhite = <HTMLCanvasElement>document.getElementById(\"blackonwhite\");\n    const blackonwhitectx = blackonwhite.getContext('2d')\n    blackonwhitectx.filter = 'invert(1)'\n\n    framerx(maskvideo).subscribe((value: [HTMLVideoElement, number, any]) => {\n      maskTime = value[2][\"mediaTime\"];\n      whiteonblackctx.drawImage(value[0], 0, 0);\n      blackonwhitectx.drawImage(value[0], 0, 0);\n    });\n    framerx(facevideo).subscribe((value: [HTMLVideoElement, number, any]) => {\n      let faceTime = value[2][\"mediaTime\"];\n      if (maskTime != -1 && faceTime > (maskTime + 1 / 24)) {\n        console.log(\"face is ahead of mask\", faceTime, maskTime, (faceTime - maskTime) * 24);\n      }\n\n      if (maskTime != -1 && maskTime > (faceTime + 1 / 24)) {\n        console.log(\"mask is ahead of face\", faceTime, maskTime, (maskTime - faceTime) * 24);\n      }\n    });\n  });\n}\n\nmain();","import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n"],"names":["$f5ed4ab2a4d1861b$var$extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","$f5ed4ab2a4d1861b$export$a8ba968b8961cb8a","TypeError","String","__","this","constructor","create","$f5ed4ab2a4d1861b$export$1050f835b63b671e","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","body","t","g","sent","n","v","op","y","_","label","ops","pop","trys","length","push","f","verb","throw","return","Symbol","iterator","$f5ed4ab2a4d1861b$export$19a8beecd37a4c45","o","m","s","i","$f5ed4ab2a4d1861b$export$8d051b38c9118094","r","ar","error","to","from","j","il","$f5ed4ab2a4d1861b$export$10c90e4f7922046c","$f5ed4ab2a4d1861b$export$e427f37a30a4de9b","asyncIterator","q","a","resume","fulfill","settle","shift","$390adda5fd19a2d6$export$f6e2535fb5126e54","createImpl","ctorFunc","$026eda5c570ccb60$export$c9648b76fd580c34","_super","errors","message","map","err","toString","join","name","instance","Error","stack","$fb0c758b8faa1e2a$export$dae3f38077fc36c0","arr","item","index","indexOf","splice","$0c79c60f10e25061$export$f55210826850c514","Subscription","initialTeardown","closed","_parentage","_teardowns","empty","unsubscribe","isArray","_parentage_1","_parentage_1_1","remove","_teardowns_1","_teardowns_1_1","teardown_1","$0c79c60f10e25061$var$execTeardown","$f5ed4ab2a4d1861b$export$1216008129fb82ed","add","teardown","_hasParent","_addParent","_a","parent","includes","_removeParent","EMPTY","$0c79c60f10e25061$export$4f9221cbada3c4fc","$55472713ab39a4da$export$e506a1d27d1eaa20","onUnhandledError","onStoppedNotification","undefined","useDeprecatedSynchronousErrorHandling","useDeprecatedNextContext","$747d70177225ac2e$export$365aa6bd3c788e3d","setTimeout","args","_i","arguments","delegate","clearTimeout","handle","$011e5d1bc8793d8f$export$ebf645db02d3e99f","$b1207576672ff0a1$export$8793edee2d425525","$6e71844eb8fb8894$export$b7f97edb34bc1f87","$6e71844eb8fb8894$export$9c8f6e8d39c60cf3","kind","$dee8986d11ecfbd2$var$context","$dee8986d11ecfbd2$export$3e205fbb5df021e0","errorThrown","$4bd741c10f565752$export$60959659b2c22881","Subscriber","destination","_this","isStopped","$4bd741c10f565752$export$88d395d20619a0af","complete","$4bd741c10f565752$export$94eeb6a328cab6c7","$4bd741c10f565752$var$handleStoppedNotification","$6e71844eb8fb8894$export$ff9346b0d1d30313","_next","_error","_complete","SafeSubscriber","observerOrNext","context_1","bind","$4bd741c10f565752$var$wrapForErrorHandling","$4bd741c10f565752$var$defaultErrorHandler","handler","notification","subscriber","$9f1965c8ab242a40$export$5ab46cbf6120b33a","observable","$df305a39c402bbe4$export$f0954fd7d5368655","x","$d2736e492570b20c$export$71f88a61afaa14d7","fns","input","reduce","prev","fn","$2291f71a0036fa02$export$77cea355fa80b5f4","Observable","subscribe","_subscribe","lift","operator","source","$2291f71a0036fa02$var$isObserver","cb","isRoot","$dee8986d11ecfbd2$export$d974811edc77eafa","_trySubscribe","sink","forEach","promiseCtor","$2291f71a0036fa02$var$getPromiseCtor","subscription","pipe","operations","toPromise","$ba036f2388dbd8ad$export$1e2f57719e155213","$2fe5679b795ca099$export$6f58e2338da23f4d","$73e1b4b68a4d58ca$export$6a9cfa3ebc765910","$f1a1ff69d6217eb6$export$48c0cddbc99c45c2","obj","obs","array","promise","$da57935939ca9c16$export$edb10ab8dd75a915","$73e1b4b68a4d58ca$export$e073fccf36d78cc1","$82032c4f549f5cd4$export$9652023d9040757","iterable","iterable_1","iterable_1_1","getReader","$42c86ab8e6ccec32$export$c088ffafdba7405f","readableStream","reader","read","_b","releaseLock","$42c86ab8e6ccec32$export$cf4785e597badab3","$9fbc3ed18d763dea$export$7cbe71b9fa263484","asyncIterable","asyncIterable_1","$f5ed4ab2a4d1861b$export$e3b29a3d6162315f","asyncIterable_1_1","$73e1b4b68a4d58ca$var$process","catch","$73cdb159b7187545$export$871731df685d7753","init","$73cdb159b7187545$export$ebec8610810318c5","liftedSource","$94684df14c25c18c$export$8fbbf0c4d80268e5","OperatorSubscriber","onNext","onComplete","onError","onFinalize","err1","$a5cbdcd6cbcbc1c4$export$871de8747c9eaa88","project","$6d95d0a3c23e5dc7$export$6b9f6c0d32c093f9","resultSelector","concurrent","Infinity","ii","onBeforeNext","expand","innerSubScheduler","additionalTeardown","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","innerComplete","innerValue","bufferedValue","parentSubscription","scheduler","work","delay","repeat","scheduleSubscription","schedule","$328d0af0ef3aed41$export$a2b7447487315232","$03097568c8340eb2$export$600918ebaa9e0a1b","$785b56a2951e3f7d$var$isArray","$785b56a2951e3f7d$export$559affaa48f4288d","$785b56a2951e3f7d$var$callOrApply","$0f54b2b6fdc78d47$var$nodeEventEmitterMethods","$0f54b2b6fdc78d47$var$eventTargetMethods","$0f54b2b6fdc78d47$var$jqueryMethods","$0f54b2b6fdc78d47$export$a36e16046ae8f1bb","target","eventName","options","addEventListener","removeEventListener","$0f54b2b6fdc78d47$var$isEventTarget","methodName","addListener","removeListener","$0f54b2b6fdc78d47$var$isNodeStyleEventEmitter","$0f54b2b6fdc78d47$var$toCommonHandlerRegistry","on","off","$0f54b2b6fdc78d47$var$isJQueryStyleEventEmitter","subTarget","$11371fc40c5c063e$var$isArray","$11371fc40c5c063e$export$24e1bb79414042be","$ce4337d88b881b98$export$ccb33e29d92c9a58","$ba29b8cd54e70848$var$last","$ba29b8cd54e70848$export$9ae19b645239a61b","$fb40cd7f7dd5b38a$export$8901015135f2fb22","sources","buffers","completed","_loop_1","sourceIndex","every","some","console","log","$a0fbfdbf4fb9a96d$var$facevideo","document","getElementById","$a0fbfdbf4fb9a96d$var$maskvideo","$a0fbfdbf4fb9a96d$var$framerx","video","subscribed","listener","time","meta","requestVideoFrameCallback","$a0fbfdbf4fb9a96d$var$maskTime","$a0fbfdbf4fb9a96d$var$playbutton","onclick","play","disabled","whiteonblackctx","getContext","blackonwhitectx","filter","drawImage","faceTime"],"version":3,"file":"index.88f4744c.js.map"}